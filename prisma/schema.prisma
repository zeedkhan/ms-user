generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MessageType {
  TEXT
  FILE
}

model Storage {
  id        String   @id @default(cuid())
  name      String
  size      Int
  key       String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole  @default(USER)

  storageFiles Storage[]
  messages  Message[]
  chatRooms RoomUser[]
  blogs     Blog[]
}

model RoomUser {
  id     Int    @id @default(autoincrement())
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Room {
  id        String     @id @default(cuid())
  name      String
  avatar    String?    @default("")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     RoomUser[]
  messages  Message[]
}

model Message {
  id         String      @id @default(cuid())
  text       String?
  type       MessageType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  chatRoomId String

  files File[]

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [chatRoomId], references: [id])

  isDeleted Boolean @default(false)

  @@index([chatRoomId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  size      Int
  key       String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Blog {
  id          String  @id @default(uuid())
  title       String
  content     Json
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  pageViews Int @default(0)

  seoPath String @unique

  version  Int           @default(1)
  versions BlogVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BlogVersion {
  id          String @id @default(uuid())
  title       String
  content     Json
  description String @default("")
  version     Int
  blogId      String
  blog        Blog   @relation(fields: [blogId], references: [id])
}
